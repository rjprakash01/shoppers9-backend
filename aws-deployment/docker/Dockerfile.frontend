# Multi-stage build for React customer frontend
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY shoppers9-frontend/package*.json ./

# Install dependencies
RUN npm ci

# Copy source code
COPY shoppers9-frontend/ ./

# Copy production environment file
COPY shoppers9-frontend/.env.production ./.env.production

# Temporarily disable strict unused checks for build
RUN sed -i 's/"noUnusedLocals": true/"noUnusedLocals": false/' tsconfig.app.json

# Build the application
RUN npm run build

# Production stage with Nginx
FROM nginx:alpine AS production

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built files
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy custom nginx configuration
COPY aws-deployment/nginx/frontend.conf /etc/nginx/conf.d/default.conf

# Create non-root user (nginx group already exists)
RUN adduser -S -D -H -u 1001 -s /sbin/nologin -G nginx appuser

# Set proper permissions
RUN chown -R appuser:nginx /usr/share/nginx/html
RUN chown -R appuser:nginx /var/cache/nginx
RUN chown -R appuser:nginx /var/log/nginx
RUN chown -R appuser:nginx /etc/nginx/conf.d
RUN touch /var/run/nginx.pid
RUN chown -R appuser:nginx /var/run/nginx.pid

# Keep running as root for port 80 access
# USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080 || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]