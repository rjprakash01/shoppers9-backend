version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: shoppers9-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: shoppers9
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - shoppers9-network

  # Backend API
  backend:
    build:
      context: ..
      dockerfile: aws-deployment/docker/Dockerfile.backend
    container_name: shoppers9-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://shoppers9_user:${MONGO_USER_PASSWORD}@mongodb:27017/shoppers9
      JWT_SECRET: ${JWT_SECRET}
      SMS_API_KEY: ${SMS_API_KEY}
      RAZORPAY_KEY_ID: ${RAZORPAY_KEY_ID}
      RAZORPAY_KEY_SECRET: ${RAZORPAY_KEY_SECRET}
    ports:
      - "3000:3000"
    depends_on:
      - mongodb
    networks:
      - shoppers9-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Frontend
  admin:
    build:
      context: ..
      dockerfile: aws-deployment/docker/Dockerfile.admin
    container_name: shoppers9-admin
    restart: unless-stopped
    ports:
      - "3001:80"
    depends_on:
      - backend
    networks:
      - shoppers9-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Customer Frontend
  frontend:
    build:
      context: ..
      dockerfile: aws-deployment/docker/Dockerfile.frontend
    container_name: shoppers9-frontend
    restart: unless-stopped
    ports:
      - "3002:80"
    depends_on:
      - backend
    networks:
      - shoppers9-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: shoppers9-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - shoppers9-network
    command: redis-server --appendonly yes

volumes:
  mongodb_data:
  redis_data:

networks:
  shoppers9-network:
    driver: bridge